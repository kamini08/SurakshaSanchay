generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum Category {
  COMMUNICATION_DEVICES
  COMPUTER_AND_IT_EQUIPMENT
  NETWORKING_EQUIPMENT
  SURVEILLANCE_AND_TRACKING
  VEHICLE_AND_ACCESSORIES
  PROTECTIVE_GEAR
  FIREARMS
  FORENSIC
  MEDICAL_FIRST_AID
  OFFICE_SUPPLIES
}

enum UserRole {
  ADMIN
  INCHARGE
  USER
}

model User {
  id                    String                 @id @default(cuid())
  govId                 String                 @unique
  name                  String
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String
  role                  String
  stars                 Int?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  // Government ID (optional)
  location              String // Location
  phone                 String? // Phone number (optional)
  inventoryItems        InventoryItem[]
  maintenanceRequests   MaintenanceRequest[]
  notifications         Notification[]         @relation("UserNotifications")
  inchargeNotifications Notification[]         @relation("InchargeNotifications")

  IssuanceRequest IssuanceRequest[]

  ReturnRequest ReturnRequest[]
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum Avail {
  AVAILABLE
  UNAVAILABLE
}

model InventoryItem {
  itemId              String    @id
  category            Category
  type                String
  description         String?
  quantity            Int       @default(1)
  location            String?
  condition           String    @default("new")
  status              Avail     @default(AVAILABLE)
  acquisitionDate     DateTime?
  expiryDate          DateTime?
  price               Float?
  supplier            String?
  returnDate          String?
  lastInspectionDate  DateTime?
  maintenanceSchedule String?
  maintenanceCharge   Float?
  issuedTo            String?
  isLost              Boolean   @default(false)
  temporaryLocation   String?

  userId String?
  user   User?   @relation(fields: [userId], references: [govId], onDelete: SetNull)

  communicationDevice     CommunicationDevice?
  computerAndITEquipment  ComputerAndITEquipment?
  networkingEquipment     NetworkingEquipment?
  surveillanceAndTracking SurveillanceAndTracking?
  vehicleAndAccessories   VehicleAndAccessories?
  protectiveGear          ProtectiveGear?
  firearm                 Firearm?
  forensicEquipment       ForensicEquipment?
  medicalFirstAid         MedicalFirstAid?
  officeSupply            OfficeSupply?

  maintenanceRequests MaintenanceRequest[]

  locationHistories ItemLocationHistory[]


  itemAssignmentHistories ItemAssignmentHistory[]

  ReturnRequest ReturnRequest[]

  
}

model IssuanceRequest {
  id                    String         @id @default(cuid()) // Unique identified
  name                  String
  category              Category
  quantity              Int
  expectedDeliveryDate  DateTime
  purpose               String
  expectedUsageDuration String
  approvalNeededBy      DateTime
  priorityLevel         String
  createdAt             DateTime       @default(now()) // Automatically set creation time
  updatedAt             DateTime       @updatedAt // Automatically update timestamp
  userId                String
  user                  User           @relation(fields: [userId], references: [govId])
  inchargeId            String?
  isDamaged             Boolean?       @default(false)
  status                IssuanceStatus @default(PENDING)
  approvalDate          DateTime?
  completionDate        DateTime?
  issueDescription      String
  resolutionDetails     String?
  discardReason         String?
}

enum IssuanceStatus {
  PENDING
  APPROVED
  REJECTED
}

model MaintenanceRequest {
  id                String            @id @default(cuid())
  itemId            String // Foreign key to InventoryItem
  item              InventoryItem     @relation(fields: [itemId], references: [itemId], onDelete: Cascade)
  userId            String // Foreign key to User
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  technicianId      String? // Technician field (optional)
  status            MaintenanceStatus @default(PENDING)
  requestDate       DateTime          @default(now())
  approvalDate      DateTime?
  govId String? 
  completionDate    DateTime?
  issueDescription  String
  resolutionDetails String?
  discardReason     String?
  maintenanceCharge Float?
}

enum MaintenanceStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  DISCARDED
}

model CommunicationDevice {
  id              String  @id @default(cuid())
  inventoryItemId String  @unique
  frequencyRange  String?
  batteryType     String?
  connectivity    String?

  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [itemId], onDelete: Cascade)
}

model ComputerAndITEquipment {
  id              String  @id @default(cuid())
  inventoryItemId String  @unique
  processor       String?
  RAM             String?
  storage         String?
  OS              String?

  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [itemId], onDelete: Cascade)
}

model NetworkingEquipment {
  id              String  @id @default(cuid())
  inventoryItemId String  @unique
  bandwidth       String?
  ports           String?
  protocols       String?

  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [itemId], onDelete: Cascade)
}

model SurveillanceAndTracking {
  id               String  @id @default(cuid())
  inventoryItemId  String  @unique
  cameraResolution String?
  nightVision      Boolean @default(false)
  GPSAccuracy      String?

  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [itemId], onDelete: Cascade)
}

model VehicleAndAccessories {
  id              String   @id @default(cuid())
  inventoryItemId String   @unique
  vehicleType     String?
  makeAndModel    String?
  licensePlate    String?
  engineCapacity  String?
  accessories     String[]

  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [itemId], onDelete: Cascade)
}

model ProtectiveGear {
  id              String  @id @default(cuid())
  inventoryItemId String  @unique
  protectionLevel String?
  size            String?
  material        String?

  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [itemId], onDelete: Cascade)
}

model Firearm {
  id              String  @id @default(cuid())
  inventoryItemId String  @unique
  caliber         String?
  ammoType        String?
  serialNumber    String?
  licenseDetails  String?

  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [itemId], onDelete: Cascade)
}

model ForensicEquipment {
  id                  String  @id @default(cuid())
  inventoryItemId     String  @unique
  usageType           String?
  sensitivity         String?
  storageRequirements String?

  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [itemId], onDelete: Cascade)
}

model MedicalFirstAid {
  id                String    @id @default(cuid())
  inventoryItemId   String    @unique
  expirationDate    DateTime?
  dosage            String?
  storageConditions String?

  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [itemId], onDelete: Cascade)
}

model OfficeSupply {
  id              String  @id @default(cuid())
  inventoryItemId String  @unique
  itemType        String?
  dimensions      String?
  material        String?

  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [itemId], onDelete: Cascade)
}

model Notification {
  id         String   @id @default(cuid())
  userId     String // User ID (User who created the maintenance request)
  inchargeId String // Incharge ID (User who will be notified)
  message    String // Notification message
  read       Boolean  @default(false) // Whether the notification has been read
  createdAt  DateTime @default(now()) // Timestamp of when the notification was created

  // Add relation names to avoid ambiguity
  user     User @relation("UserNotifications", fields: [userId], references: [id])
  incharge User @relation("InchargeNotifications", fields: [inchargeId], references: [id])
}

enum stat {
  In
  Out
}
model ItemLocationHistory {
  id             String   @id @default(cuid())
  itemId         String   // Foreign key to InventoryItem
  govId          String   // govId of the person to whom the item is assigned
  assignedDate   DateTime @default(now()) // Date and time of assignment
  location       String   // Location where the item is assigned
  status  String?
 
  // description    String?  // Optional description for the transfer
  inventoryItem InventoryItem @relation(fields: [itemId], references: [itemId], onDelete: Cascade)

  @@index([itemId, assignedDate]) // Optional index for faster queries
}

model ItemAssignmentHistory {
  id          String   @id @default(uuid())
  itemId      String
  assignedTo  Json    // Array of `govId`s of assigned users
  assignedBy  Json    // Array of `govId`s of assignors
  assignDates Json    // Array of DateTimes for assignments
  returnDates Json?   // Array of DateTimes for returns (optional)
  inchargeIds Json    // Array of `govId`s for incharges
  
  itemStatus      Json   // e.g., 'Assigned', 'Returned'
  reason      Json?  // Optional: reason for the transfer or return
  
  // Relationships
  item        InventoryItem @relation(fields: [itemId], references: [itemId])
}


enum PolicyName {
  STORAGE_POLICY
  PROCUREMENT_POLICY
  PURCHASE_POLICY
  USAGE_AND_DEPLOYMENT_POLICY
  DISPOSAL_POLICY
}

enum ComplianceStatus {
  COMPLIANT
  NON_COMPLIANT
  PARTIALLY_COMPLIANT
}

model Policy {
  id                   String           @id @default(cuid())
  name                 PolicyName
  findings             String
  impact               String
  recommendation       String
  complianceStatus     ComplianceStatus
  compliancePercentage String

  AuditReport AuditReport[]
}

model Stock {
  id                    String @id @default(cuid())
  specializedEquipment  Int
  operationalAssets     Int
  governmentFundedItems Int

  AuditReport AuditReport[]
}

model AuditReport {
  id               String   @id @default(cuid())
  auditOfficerName String
  auditOfficerId   String
  location         String
  startDate        DateTime
  endDate          DateTime
  createdAt        DateTime @default(now())
  Policies         Policy[] 
  Policiesid       String[]
  StockAccuracy    Stock?   @relation(fields: [StockId], references: [id])
  StockId          String?
  url              String?
}

enum PenaltyReason {
  RETURN_DELAYED
  ITEM_LOST
  ITEM_DAMAGED
}

model Penalty {
  id                   String        @id @default(cuid())
  userId               String
  reason               PenaltyReason
  amount               Int
  numberOfStarsReduced Int
  description          String
  inchargeId           String
  date                 DateTime @default(now())

}

model Award {
  id                 String   @id @default(cuid())
  userId             String
  numberOfStarsAdded Int
  description        String
  inchargeId         String
  date               DateTime @default(now())
}
model ReturnRequest {
  id                 String   @id @default(cuid())
  userId             String
  equipmentName String
  name  String
  user               User     @relation(fields: [userId], references: [govId])
  itemId             String
  item               InventoryItem @relation(fields: [itemId], references: [itemId])
  notes            String
  isLost Boolean @default(false)
  returnDate DateTime
  inchargeId         String
  date               DateTime
  isDamaged Boolean @default(false)
  returnStatus String @default("Not Completed")
}

model ReportLogs {

  id String @id @default(cuid())
  location String
  auditurl  String[]
  createdAt DateTime[]
}
model Station {
  id                String   @id @default(cuid())
  name String
  lat String
  long String 
}
